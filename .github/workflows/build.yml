# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# Fo more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Deploy Expency Application

on:
  push:
    branches: [ "main", "feature/t-testing-cicd-with-ansible"]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # - name: Set up Terraform
    #   uses: hashicorp/setup-terraform@v1
    #   with:
    #     terraform_version: 1.0.0
    #
    # - name: Terraform Init
    #   run: terraform init
    #   working-directory: terraform/resources
    #
    # - name: Terraform Apply
    #   run: terraform apply -auto-approve
    #   working-directory: terraform/resources
    #
    # - name: Terraform Init (Main)
    #   run: terraform init
    #   working-directory: terraform
    #
    # - name: Terraform Apply (Main)
    #   run: terraform apply -auto-approve
    #   working-directory: terraform


    - name: Install Helm
      run: sudo snap install helm --classic

    - name: Add AWS EBS CSI Driver Repo
      run: helm repo add aws-ebs-csi-driver https://kubernetes-sigs.github.io/aws-ebs-csi-driver

    - name: Update Helm Repos
      run: helm repo update

    - name: Install AWS EBS CSI Driver
      run: helm install aws-ebs-csi-driver aws-ebs-csi-driver/aws-ebs-csi-driver --namespace kube-system

    - name: Install AWS CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y awscli
    - name: Configure AWS Credentials
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.TAWFEEQ_AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.TAWFEEQ_AWS_SECRET_ACCESS_KEY }}
      run: |
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY

    - name: Set up kubectl
      uses: actions-hub/kubectl@master
      with:
        version: '1.18'

    - name: Update kubeconfig
      run: aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAMESPACE }}

    - name: Set Kubernetes context to the desired namespace
      run: kubectl config set-context --current --namespace=${{ secrets.K8S_NAMESPACE }}

    - name: Build and Push Backend Docker Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/expensy-backend:latest ./expensy_backend
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker push ${{ secrets.DOCKER_USERNAME }}/expensy-backend:latest

    - name: Build and Push Frontend Docker Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/expensy-frontend:latest ./expensy_frontend
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker push ${{ secrets.DOCKER_USERNAME }}/expensy-frontend:latest

    - name: Ansible Playbook for Monitoring and Logging
      uses: dawidd6/action-ansible-playbook@v2
      with:
        playbook: ansible/playbook.yml

    - name: Setup Ansible Playbook
      run: |
        ansible-galaxy collection install community.kubernetes
        ansible-playbook ansible/playbook.yml
